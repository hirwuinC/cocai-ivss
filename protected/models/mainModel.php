<?php   class mainModel extends Model{    protected $query;    public function __construct(){      parent::__construct();    }    public function __destruct(){      ;    }   public function Gets($tabla = false, $item = false, $valor = false, $modelo = false){       $idu = Session::get('idUsuario');      switch ($tabla) {        case 'referencia':         if ($item == 'padre_id') {            $query = "SELECT ref.id, ref.referencia from referencia inner join referencia as ref on ref.padre_id = referencia.id where ref.padre_id = '".$valor."' ORDER BY ref.referencia";          }else if($item == 'sub_modelo'){              $query = "SELECT ref.id, ref.referencia from referencia inner join referencia as ref on ref.padre_id = referencia.id where ref.padre_id = '".$valor."' and ref.referencia not in ('TP','CK','MF','FP','RB','PL','OH','Sin asignar')";          } else{            $query = "SELECT ref.id, ref.referencia from referencia  inner join referencia ref on ref.padre_id = referencia.id where referencia.referencia = '".$item."' ";          }            /*$query = "SELECT referencia.id, ref.id, referencia.referencia, ref.referencia from referencia inner join referencia as ref on ref.padre_id = referencia.id where ref.padre_id = '".$valor."'";*/          break;        case 'unidad_negocio':           //echo $item;            if ($item == 'modelo_id') {              $query="SELECT unidad_negocio.id, unidad_negocio.nombreC, unidad_negocio.codigo, unidad_negocio.numero_autorizacion, referencia.referencia as division, ref.referencia as modelo from unidad_negocio inner join referencia on unidad_negocio.division_id = referencia.id LEFT join referencia as ref on unidad_negocio.modelo_id = ref.id where unidad_negocio.".$item." = '".$valor."'";            }else if($item == 'division_id'){             // echo "full services funciona";              $query = "SELECT unidad_negocio.id, unidad_negocio.nombreC, unidad_negocio.codigo,  unidad_negocio.numero_autorizacion, referencia.referencia as division, ref.referencia as modelo from unidad_negocio               inner join referencia on unidad_negocio.division_id = referencia.id              LEFT join referencia as ref on unidad_negocio.modelo_id = ref.id              where unidad_negocio.".$item." = '".$valor."'";               }                    break;        case 'direccion':          if ($item == 'estado') {            $query = "SELECT distinct direccion.id, direccion.nombre FROM `direccion` inner join referencia on referencia_id = referencia.id inner join direccion as dir on dir.padre_id = direccion.id inner join direccion as dir2 on dir2.padre_id = dir.id  where referencia = '".$item."' ";          }else if ($item == 'parroquia') {            $query = "SELECT direccion.id, nombre FROM `direccion` inner join referencia on referencia_id = referencia.id where referencia = '".$item."' and direccion.padre_id = ".$valor." ";          }else if ($item == 'municipio') {            $query = "SELECT distinct direccion.id, direccion.nombre FROM `direccion` inner join referencia on referencia_id = referencia.id inner join direccion as dir on dir.padre_id = direccion.id  where referencia = 'municipio' and direccion.padre_id = ".$valor."";          }else{            $query = "SELECT direccion.id, nombre FROM `direccion` inner join referencia on referencia_id = referencia.id where referencia = '".$item."'and direccion.padre_id = ".$valor." ";          }        break;        case 'grupo':          if ($item == 'grupo') {            $query = "SELECT grupo.id, grupo.nombre as grupo from grupo            LEFT join modelo_has_grupo on grupo.id = grupo_id            LEFT join modelo_has_submodelo on modelo_has_grupo.modelo_id = modelo_has_submodelo.sub_modelo_id            where modelo_has_submodelo.modelo_id = '".$valor."' and grupo.familia_id = '".$modelo."'";          }        break;        case 'producto':           $query = "SELECT id, nombre, codigo FROM `producto` WHERE grupo_id = $valor";          break;        case 'unidad_medida':          if ($modelo == '30') {            $query = "SELECT * from unidad_medida where unidad_medida.abreviatura is not null and unidad not in('Fardo(s)','Guacal(es)','Saco(s)','caja(s)','Guacal(es)','Botella(s)','Lata(s)','Resma(s)','Docena(s)','Frasco(s)','Cuenta(s)','Bandeja(s)','cuñete(s)','Barra(s)','Bulto(s)','Bovina(s)','Paquete(s)')";          }          else if ($item == 'unidad_medida_sis') {            $query = "SELECT * from unidad_medida where unidad_medida.abreviatura is not null and padre_id = $modelo  and unidad not in('Fardo','Guacal','Saco','caja','Fardo','Guacal','Botella','Lata','Resma','Docena','Frasco','Cuenta','Bandeja','cuñete','Barra','Bulto','Bovina','Paquete')";          }else if ($modelo == 99) {            $query = "SELECT * from unidad_medida where unidad_medida.abreviatura is not null and unidad not in('Fardo(s)','Guacal(es)','Saco(s)','caja(s)','Guacal(es)','Botella(s)','Lata(s)','Resma(s)','Docena(s)','Frasco(s)','Cuenta(s)','Bandeja(s)','cuñete(s)','Barra(s)','Bulto(s)','Bovina(s)','Paquete(s)')";          }else{            $query = "SELECT * from unidad_medida where unidad_medida.abreviatura is not null";          }                  break;        case 'modelo':          if ($item == 'modelo_id') {            $query = "SELECT DISTINCT(modelo.id) as id,modelo.nombre as nombre FROM `usuario`         left join usuario_has_unidad_negocio on usuario_has_unidad_negocio.usuario_id = usuario.id         left join unidad_negocio on unidad_negocio.id = usuario_has_unidad_negocio.unidad_negocio_id         left join modelo_has_submodelo on modelo_has_submodelo.id = unidad_negocio.modelo_has_submodelo_id         left join modelo on modelo.id = modelo_has_submodelo.modelo_id        inner join referencia on usuario.tipo_usuario_id = referencia.id        WHERE usuario.id = $idu and modelo.padre_id = 4 or modelo.padre_id = 5";          }                  break;        case 'mercancia':            $query = "SELECT id, nombre from mercancia";        break;        case 'proveedor':            $query = "SELECT id, nombre from proveedor";        break;                default:           $query = "SELECT * FROM ".$tabla." where ".$item." = '".$valor."'";          break;      }                  $auxiliar = $this->_db->query($query);        try {        $this->_db->beginTransaction();        $result= $auxiliar->fetchAll();        $this->_db->commit();        }        catch (Exception $e){                    $this->_db-rollBack();          echo "Error :: ".$e->getMessage();          exit();                  }      //  echo $result[1][1];        return $result;                }    public function select($query){            $auxiliar = $this->_db->query($query);        try {        $this->_db->beginTransaction();        $result= $auxiliar->fetchAll();        $this->_db->commit();        }        catch (Exception $e){                    $this->_db-rollBack();          echo "Error :: ".$e->getMessage();          exit();                  }                return $result;          }    public function insertar($query, $tabla=false){      //var_dump($query);      //exit();      try {        $this->_db->beginTransaction();        $this->_db->prepare($query)->execute();        $id =  $this->_db->lastinsertid($tabla);        $this->_db->commit();      }      catch (Exception $e){        $this->_db->rollBack();        echo "Error :: ".$e->getMessage();        exit();      }      return $id;    }    public function totalRegistros($query){      //echo $query;      $auxiliar = $this->_db->query($query);        try {        $this->_db->beginTransaction();        $result= $auxiliar->fetchAll();        $numFila = $auxiliar->rowCount();        $this->_db->commit();        }        catch (Exception $e){                    $this->_db-rollBack();          echo "Error :: ".$e->getMessage();          exit();                  }            $result = $numFila;        return $result;    }    public function modificar($query){      //var_dump($query);       try {        $this->_db->beginTransaction();        //$this->_db->prepare($query);        $result=$this->_db->exec($query);        $this->_db->commit();              }      catch (Exception $e){        $this->_db->rollBack();        echo "Error :: ".$e->getMessage();        exit();      }    return $result;    }    public function eliminar($query){      try {        $this->_db->beginTransaction();        $this->_db->prepare($query)->execute();        $this->_db->commit();      }      catch (Exception $e){        $this->_db->rollBack();        echo "Error :: ".$e->getMessage();        exit();      }      return true;          }    function simplificarDatos($valores,$indice=false){        $indi=0;        #print_r($valores); echo "<br><br>"; #exit();        for($i=0; $i < count($valores); $i++) {          $dato[$i] = $valores[$i][$indice];         }        #print_r($dato); exit();        $result=array_unique($dato);        if(is_array($result)) {           foreach($result as $key => $val) {             $resultado[$indi] = is_array($val) ? $val[$key] : $val;             $indi=$indi+1;           }        }        #print_r($resultado); exit();        return $resultado;    }   /* public function productosSinUsar($codigoPadre){      $string = " ";      try {      $this->_db->beginTransaction();      $query = "SELECT nombre FROM combo where codigoPadre = ".$codigoPadre."";      $auxiliar = $this->_db->query($query);      $resultado = $auxiliar->fetchAll();      for ($i=0; $i < count($resultado) ; $i++) {          $aux[$i]= $resultado[$i]['nombre'];         $cadena = "and profesor_id != $aux[$i] ";         $string = $string.$cadena;              }         $query = "SELECT DISTINCT producto.nombre as 'producto', grupo.nombre as 'grupo' FROM producto           where referencia.id = ".$carrera." and (materia_id != ".$materia." or materia_id is null) ".$string;       $auxiliar2 = $this->_db->query($query);       $result2= $auxiliar2->fetchAll();                      //Controller::Vardump($result2);        $this->_db->commit();        }        catch (Exception $e){                    $this->_db-rollBack();          echo "Error :: ".$e->getMessage();          exit();                  }                return $result2;          } */      }?>